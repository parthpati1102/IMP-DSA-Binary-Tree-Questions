//Brute Force Approch
class Solution {
public:
    int getPosition(vector<int> &inorder , int inStart , int inEnd , int data){
          for(int i = inStart ; i <= inEnd ; i++){
               if(inorder[i] == data){
                  return i;
               }
          }

          return 0;
    }
    TreeNode * solve(vector<int>& preorder, vector<int>& inorder , int & preIndex , int inStart , int inEnd){
        if(preIndex >= preorder.size() || inStart > inEnd){
            return NULL;
        }

        int data = preorder[preIndex];
        preIndex++;

        TreeNode * root = new TreeNode(data);

        int pos = getPosition(inorder , inStart , inEnd , data);

        root -> left = solve(preorder , inorder , preIndex , inStart , pos - 1);

        root -> right = solve(preorder , inorder , preIndex , pos + 1 , inEnd);

        return root;
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preIndex = 0;
        int inStart = 0;
        int inEnd = inorder.size() - 1;

        TreeNode * root = solve(preorder , inorder , preIndex , inStart , inEnd);
        
        return root;
    }
};


//Using Map
class Solution {
public:
    TreeNode * solve(vector<int>& preorder, vector<int>& inorder , int & preIndex , int inStart , int inEnd , unordered_map<int , int> &mp){
        if(preIndex >= preorder.size() || inStart > inEnd){
            return NULL;
        }

        int data = preorder[preIndex];
        preIndex++;

        TreeNode * root = new TreeNode(data);

        int pos = mp[data];

        root -> left = solve(preorder , inorder , preIndex , inStart , pos - 1 , mp);

        root -> right = solve(preorder , inorder , preIndex , pos + 1 , inEnd , mp);

        return root;
        
    }
    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) {
        int preIndex = 0;
        int inStart = 0;
        int inEnd = inorder.size() - 1;

        unordered_map<int , int> mp;

        for(int i = 0 ; i < inorder.size() ; i++){
            mp[inorder[i]] = i;
        }

        TreeNode * root = solve(preorder , inorder , preIndex , inStart , inEnd , mp);
        
        return root;
    }
};
