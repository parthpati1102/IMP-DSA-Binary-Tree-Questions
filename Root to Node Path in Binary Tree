//passing vec as a reference we can also have to do backtrack else no need of backtracking
class Solution {
public:
    void solve(Node* root, vector<int>& vec, vector<vector<int>>& ans) {
        if (root == NULL) {
            return;
        }
        
        // Add the current node's data to the path
        vec.push_back(root->data);
        
        // If it's a leaf node, add the current path to the answer
        if (root->left == NULL && root->right == NULL) {
            ans.push_back(vec);
        }
        
        // Recur for the left and right subtrees
        solve(root->left, vec, ans);
        solve(root->right, vec, ans);
        
        // Backtrack: remove the current node's data from the path
        vec.pop_back();
    }
    
    vector<vector<int>> Paths(Node* root) {
        vector<int> vec;
        vector<vector<int>> ans;
        solve(root, vec, ans);
        return ans;
    }
};
